type NoteRecord {
  noteId: String!
  revision: Int
}

type Note {
  noteId: String!
  revision: Int
  body: String!
}

type Tag {
  tagId: String!
  tagName: String!
}

enum AtType {
  unset,
  yesno,
  yesno_timer,
  timer
}

type At {
  atId: String!
  atName: String!
  atType: AtType!
}

type Query {
  allNotes: [NoteRecord!]!
  getNote(noteId: String!): Note!
  allTags: [Tag!]!
  allAts: [At!]!
  search(tagIds: [String!]): [Note!]! 
}

type Mutation {
  createNote(noteId: String!, createdAt: String!): NoteRecord!
  updateNote(noteId: String!, noteRevisionId: Int, updatedAt: String!, body: String!): NoteRecord

  createTag(tagId: String!, tagName: String!): Tag!
  createAt(atId: String!, atName: String!): At!
}
