// Generated by CoffeeScript 1.10.0
(function() {
  var EntryStore, actions, common, entry_store, initialize, main, mount_entries, view,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  common = window.Common;

  entry_store = false;

  initialize = function() {
    console.log('Journal: initializing');
    if (typeof html5 !== "undefined" && html5 !== null) {
      html5.addElements('entries entry tag-cloud');
    }
    initialize = function() {
      return false;
    };
    return true;
  };

  mount_entries = function(root) {
    return console.log("Appending entries to", root);
  };

  view = function(datestr) {
    var date;
    date = moment(datestr, 'YYYY-MM');
    document.title = (date.format('MMM YYYY')) + " / journal";
    $("#habits-link").attr("href", "/habits#view/" + (date.format('YYYY-MM')) + "/0");
    return $.get("/journal/entries/date?date=" + datestr, function(entries) {
      console.log("View date", entries);
      return riot.mount('entries', {
        title: date.format('MMM YYYY'),
        date: date,
        entries: entries
      });
    });
  };

  actions = {
    view: view,
    tag: function(name) {
      return $.get("/journal/entries/tag/" + name, function(entries) {
        console.log("View tag " + name);
        return riot.mount('entries', {
          title: name,
          entries: entries,
          thunk: mount_entries
        });
      });
    },
    tags: function() {
      return $.get("/journal/tags", function(results) {
        var i, len, value;
        for (i = 0, len = results.length; i < len; i++) {
          value = results[i];
          console.log(value);
        }
        RiotControl.trigger('entries-unmount');
        return riot.mount('tag-cloud', {
          tags: results
        });
      });
    },
    no_action: function() {
      return riot.route("view/" + (moment().format('YYYY-MM')));
    }
  };

  EntryStore = (function(superClass) {
    extend(EntryStore, superClass);

    function EntryStore() {
      return EntryStore.__super__.constructor.apply(this, arguments);
    }

    EntryStore.prototype.on_journal_update = function(entry) {
      return common.request({
        url: "/journal/update",
        success: function(data) {
          return true;
        },
        data: entry
      });
    };

    EntryStore.prototype.on_add_tag = function(entry_id, tag) {
      return $.post({
        url: "/journal/add-tag/" + entry_id + "/" + tag
      });
    };

    EntryStore.prototype.on_remove_tag = function(entry_id, tag) {
      return $.post({
        url: "/journal/remove-tag/" + entry_id + "/" + tag
      });
    };

    EntryStore.prototype.on_browse_tag = function(name) {
      return riot.route("tag/" + name);
    };

    return EntryStore;

  })(common.Store);

  main = function() {
    var socket;
    initialize();
    entry_store = new EntryStore;
    RiotControl.addStore(entry_store);
    $("#journal-new-entry-date").datepicker({
      onSelect: function(datestr) {
        var date;
        date = moment(datestr, "MM/DD/YYYY").format('YYYY-MM-DD');
        return $.post("/journal/new?date=" + date, function() {
          return view(moment(date, 'YYYY-MM-DD').format('YYYY-MM'));
        });
      }
    });
    common.route("/journal#", "view/" + (moment().format('YYYY-MM')), actions);
    return socket = window.Common.make_socket("journal/sync", function(entry) {
      if ($("#entry-" + entry.ID).length) {
        return RiotControl.trigger("journal-updated", entry);
      }
    });
  };

  window.Journal = {
    initialize: initialize,
    main: main,
    entry_store: entry_store
  };

}).call(this);

//# sourceMappingURL=journal.js.map
