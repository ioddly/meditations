// Generated by CoffeeScript 1.12.2
(function() {
  var Scope, Status, TaskStore, common, current_bucket, current_date, initialize, json_request, main, task_store, view,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  common = window.Common;

  current_date = false;

  current_bucket = false;

  task_store = false;

  json_request = common.json_request;

  Scope = {
    bucket: 0,
    day: 1,
    month: 2,
    year: 3,
    wrap: 4,
    bucketp: function(scope) {
      return scope === Scope.bucket || scope > Scope.year;
    }
  };

  Status = {
    unset: 0,
    complete: 1,
    incomplete: 2,
    wrap: 3
  };

  TaskStore = (function(superClass) {
    extend(TaskStore, superClass);

    function TaskStore() {
      this.mount_days = bind(this.mount_days, this);
      return TaskStore.__super__.constructor.apply(this, arguments);
    }

    TaskStore.prototype.mount_days = function(date) {
      var limit, next, today;
      date = typeof date === 'string' ? moment.utc(date) : date.clone();
      today = moment();
      limit = date.daysInMonth() + 1;
      if (today.month() === date.month() && today.year() === date.year()) {
        limit = today.date() + 1;
        next = today.clone();
        next.add(4, 'hours');
        if (next.date() !== today.date()) {
          limit += 1;
        }
      }
      console.log("Getting daily tasks");
      return $.get("/habits/in-days?date=" + (date.format('YYYY-MM-DD')) + "&limit=" + limit, function(results) {
        var i, len, result, results1;
        results = results || [];
        results1 = [];
        for (i = 0, len = results.length; i < len; i++) {
          result = results[i];
          date = moment(result.Date, "YYYY-MM-DD");
          results1.push(riot.mount("#scope-day-" + (date.format('DD')), {
            date: date,
            scope: Scope.day,
            tasks: result.Tasks
          }));
        }
        return results1;
      });
    };

    TaskStore.prototype.mount_scope = function(scope, date, mount) {
      var fetch, fetch_date, ref;
      fetch = null;
      if (Scope.bucketp(scope)) {
        return $.get("/habits/in-bucket/" + scope, function(result) {
          var ref, tasks;
          console.log(result);
          ref = [result.scope, result.tasks], scope = ref[0], tasks = ref[1];
          return result = riot.mount("#scope-bucket", {
            date: date,
            scope: scope.ID,
            tasks: tasks,
            title: scope["Name"]
          });
        });
      } else {
        date = typeof date === 'string' ? moment.utc(date) : date.clone();
        fetch_date = date.clone();
        ref = (function() {
          switch (scope) {
            case Scope.day:
              return ["day", fetch_date, "#scope-day-" + (date.format('DD'))];
            case Scope.month:
              return ["month", fetch_date.date(1), "#scope-month"];
            case Scope.year:
              return ["year", fetch_date.date(1).month(0), "#scope-year"];
          }
        })(), fetch = ref[0], fetch_date = ref[1], mount = ref[2];
        return $.get("/habits/in-" + fetch + "?date=" + (fetch_date.format('YYYY-MM-DD')), function(tasks) {
          var result;
          tasks = tasks || [];
          return result = riot.mount(mount, {
            date: date,
            scope: scope,
            tasks: tasks
          });
        });
      }
    };

    TaskStore.prototype.command = function(path, task, thunk) {
      return common.request({
        url: path,
        data: task,
        success: (function(_this) {
          return function() {
            if (thunk) {
              return thunk(task);
            }
          };
        })(this)
      });
    };

    TaskStore.prototype.on_task_new = function(scope, task_name, date) {
      return common.request({
        url: "/habits/new",
        success: (function(_this) {
          return function() {
            return _this.mount_scope(scope.scope, date);
          };
        })(this),
        data: {
          name: task_name,
          scope: scope.scope,
          date: date.format("YYYY-MM-DDTHH:mm:ssZ")
        }
      });
    };

    TaskStore.prototype.on_comment_update = function(task, comment) {
      return common.request({
        url: "/habits/comment-update",
        success: function() {
          return false;
        },
        data: comment
      });
    };

    TaskStore.prototype.on_task_order_up = function(task) {
      return this.command('/habits/order-up', task);
    };

    TaskStore.prototype.on_task_order_down = function(task) {
      return this.command('/habits/order-down', task);
    };

    TaskStore.prototype.on_task_log_time = function(task, time) {
      time = time.split(":");
      if (time.length === 1) {
        task["hours"] = 0;
        task["minutes"] = parseInt(time[0]);
      } else if (time.length === 2) {
        task["hours"] = parseInt(time[0]);
        task["minutes"] = parseInt(time[1]);
      } else {
        console.log("Bad time", time);
        return;
      }
      delete task.comment;
      return this.command('/habits/update', task);
    };

    TaskStore.prototype.on_task_update = function(task) {
      delete task.comment;
      return this.command('/habits/update', task);
    };

    TaskStore.prototype.on_task_delete = function(task) {
      return this.command('/habits/delete', task, function() {
        $("#task-" + task.ID).remove();
        riot.update();
        return task;
      });
    };

    return TaskStore;

  })(common.Store);

  initialize = function() {
    console.log('Habits: initializing');
    if (typeof html5 !== "undefined" && html5 !== null) {
      html5.addElements('scope task scope-days');
    }
    task_store = new TaskStore();
    window.Habits.task_store = task_store;
    RiotControl.addStore(task_store);
    initialize = function() {
      return false;
    };
    return true;
  };

  view = function(from, bucket) {
    console.log('Browsing from', from);
    from = moment(from, 'YYYY-MM');
    $("#journal-link").attr("href", "/journal#view/" + (from.format('YYYY-MM')));
    document.title = (from.format('MMM YYYY')) + " / habits";
    current_date = from.clone();
    current_bucket = parseInt(bucket);
    task_store.mount_scope(Scope.month, from);
    task_store.mount_scope(Scope.year, from);
    task_store.mount_scope(current_bucket, from);
    return riot.mount("scope-days", {
      thunk: function() {
        return task_store.mount_days(from);
      }
    });
  };

  main = function() {
    var socket, task_near;
    console.log('Habits: installing router');
    initialize();
    RiotControl.on("change-date", function(forward, scope) {
      var date;
      date = scope.date.clone().date(1);
      date[forward ? 'add' : 'subtract'](1, scope.scope === Scope.month ? 'months' : 'years');
      return route("view/" + (date.format('YYYY-MM')) + "/" + (current_bucket || 0));
    });
    RiotControl.on("change-bucket", function(bucket) {
      return route("view/" + (current_date.format('YYYY-MM')) + "/" + bucket);
    });
    common.route("/habits#", "view/" + (moment().format('YYYY-MM')) + "/0", {
      view: view,
      no_action: function() {
        return route("view/" + (moment().format('YYYY-MM')) + "/0");
      }
    });
    task_near = function(task, date2) {
      var date1;
      date1 = moment.utc(task.date);
      return ((task.scope === Scope.month || task.scope === Scope.day) && date1.month() === date2.month() && date1.year() === date2.year()) || (task.scope === Scope.year && date1.year() === date2.year()) || Scope.bucketp(task.scope);
    };
    socket = false;
    return socket = window.Common.make_socket("habits/sync", function(msg) {
      var date, task;
      task = msg.task;
      date = moment.utc(task.date);
      if (task_near(task, current_date)) {
        if (msg.wholescope) {
          console.log('Mounting whole scope!');
          return task_store.mount_scope(task.scope, date);
        } else {
          return RiotControl.trigger('task-updated', task);
        }
      }
    });
  };

  window.Habits = {
    Scope: Scope,
    Status: Status,
    initialize: initialize,
    task_store: task_store,
    main: main
  };

}).call(this);

//# sourceMappingURL=habits.js.map
